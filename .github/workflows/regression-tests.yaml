name: Regression tests for spv-wallet

on:
  repository_dispatch:
    types: [regression_tests]

jobs:
  preparation:
    runs-on: ubuntu-latest
    env:
      TEST_ID: ${{ github.event.client_payload.run_id }}
      IMAGE_TAG: ${{ github.event.client_payload.image_tag }}
    outputs:
      app_status: ${{ steps.wait_for_apps.outputs.app_status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: 4chain-ag/spv-wallet-regression

      - name: Cache ArgoCD CLI
        id: argocd-cache
        uses: actions/cache@v4
        with:
          path: /usr/local/bin/argocd
          key: argocd-v2.11.5

      - name: Install ArgoCD CLI
        if: steps.argocd-cache.outputs.cache-hit != 'true'
        run: |
          curl -sLO https://github.com/argoproj/argo-cd/releases/download/v2.11.5/argocd-linux-amd64
          chmod +x argocd-linux-amd64
          sudo mv argocd-linux-amd64 /usr/local/bin/argocd

      - name: Log in to ArgoCD
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
          ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
          ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}
        run: |
          argocd login $ARGOCD_SERVER --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure --grpc-web

      - name: Deploy SQLite Instance
        run: |
          DOMAIN_NAME="test-${TEST_ID}-sqlite.regression.cleanchain.org"
          argocd app create reg-sl-${TEST_ID} \
            --repo https://github.com/${{ github.repository }} \
            --path charts/spv-wallet-regression-sqlite \
            --dest-server https://kubernetes.default.svc \
            --dest-namespace sqlite-instance-${TEST_ID} \
            --revision HEAD \
            --sync-policy automated \
            --sync-option CreateNamespace=true \
            --upsert \
            --grpc-web \
            --helm-set global.domainName=${DOMAIN_NAME} \
            --helm-set spv-wallet-stack.spv-wallet.image.tag=${{ env.IMAGE_TAG }} \
            --helm-set spv-wallet-stack.spv-wallet.image.repository=wregulski/spv-wallet
        shell: bash

      - name: Deploy Postgres Instance
        run: |
          DOMAIN_NAME="test-${TEST_ID}-postgres.regression.cleanchain.org"
          argocd app create reg-pg-${TEST_ID} \
            --repo https://github.com/${{ github.repository }} \
            --path charts/spv-wallet-regression-postgres \
            --dest-server https://kubernetes.default.svc \
            --dest-namespace postgres-instance-${TEST_ID} \
            --revision HEAD \
            --sync-policy automated \
            --sync-option CreateNamespace=true \
            --upsert \
            --grpc-web \
            --helm-set global.domainName=${DOMAIN_NAME} \
            --helm-set spv-wallet-stack.spv-wallet.image.tag=${{ env.IMAGE_TAG }} \
            --helm-set spv-wallet-stack.spv-wallet.image.repository=wregulski/spv-wallet
        shell: bash

      - name: Wait for Applications to be Healthy
        id: wait_for_apps
        run: |
          sleep 120
          for i in {1..3}; do
            STATUS_SQLITE=$(argocd app get reg-sl-${TEST_ID} --grpc-web -o json | jq -r '.status.health.status')
            STATUS_POSTGRES=$(argocd app get reg-pg-${TEST_ID} --grpc-web -o json | jq -r '.status.health.status')
            SYNC_SQLITE=$(argocd app get reg-sl-${TEST_ID} --grpc-web -o json | jq -r '.status.sync.status')
            SYNC_POSTGRES=$(argocd app get reg-pg-${TEST_ID} --grpc-web -o json | jq -r '.status.sync.status')
            if [[ "$STATUS_SQLITE" == "Healthy" && "$STATUS_POSTGRES" == "Healthy" && "$SYNC_SQLITE" == "Synced" && "$SYNC_POSTGRES" == "Synced" ]]; then
              echo "Both applications are synced and healthy"
              echo "::set-output name=app_status::healthy"
              break
            fi
            echo "Waiting for applications to be healthy and synced..."
            sleep 120
            if [[ $i -eq 3 ]]; then
              echo "Applications did not become healthy and synced in time"
              echo "::set-output name=app_status::unhealthy"
            fi
          done
        shell: bash

  running-tests:
    runs-on: ubuntu-latest
    needs: preparation
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: 4chain-ag/spv-wallet-regression
          path: spv-wallet-regression

      - name: Install Go from go.mod
        uses: actions/setup-go@v5
        with:
          go-version-file: spv-wallet-regression/go.mod

      - name: Run Operator
        id: run_operator
        env:
          MASTER_INSTANCE_URL: ${{ secrets.MASTER_INSTANCE_URL }}
          MASTER_INSTANCE_XPRIV: ${{ secrets.MASTER_INSTANCE_XPRIV }}
        run: |
          cd spv-wallet-regression
          go run operator.go test-${{ github.event.client_payload.run_id }}-sqlite.regression.cleanchain.org test-${{ github.event.client_payload.run_id }}-postgres.regression.cleanchain.org
          echo "CLIENT_ONE_URL=${CLIENT_ONE_URL}" >> $GITHUB_ENV
          echo "CLIENT_TWO_URL=${CLIENT_TWO_URL}" >> $GITHUB_ENV
          echo "CLIENT_ONE_LEADER_XPRIV=${CLIENT_ONE_LEADER_XPRIV}" >> $GITHUB_ENV
          echo "CLIENT_TWO_LEADER_XPRIV=${CLIENT_TWO_LEADER_XPRIV}" >> $GITHUB_ENV
        shell: bash

      - name: Install Task
        run: |
          sudo sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
        shell: bash

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: bitcoin-sv/spv-wallet-go-client
          ref: feat-896-regression-tests-v1
          path: regression_tests

      - name: Run External Tests
        run: |
          cd regression_tests
          cd regression_tests
          task run_regression_tests
        shell: bash
        env:
          CLIENT_ONE_URL: ${{ env.CLIENT_ONE_URL }}
          CLIENT_TWO_URL: ${{ env.CLIENT_TWO_URL }}
          CLIENT_ONE_LEADER_XPRIV: ${{ env.CLIENT_ONE_LEADER_XPRIV }}
          CLIENT_TWO_LEADER_XPRIV: ${{ env.CLIENT_TWO_LEADER_XPRIV }}

  fetch-logs:
    runs-on: ubuntu-latest
    needs: [preparation, running-tests]
    if: ${{ failure() || needs.preparation.outputs.app_status == 'unhealthy' }}
    steps:
      - name: Cache ArgoCD CLI
        id: argocd-cache
        uses: actions/cache@v4
        with:
          path: /usr/local/bin/argocd
          key: argocd-v2.11.5

      - name: Install ArgoCD CLI
        if: steps.argocd-cache.outputs.cache-hit != 'true'
        run: |
          curl -sLO https://github.com/argoproj/argo-cd/releases/download/v2.11.5/argocd-linux-amd64
          chmod +x argocd-linux-amd64
          sudo mv argocd-linux-amd64 /usr/local/bin/argocd

      - name: Log in to ArgoCD
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
          ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
          ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}
        run: |
          argocd login $ARGOCD_SERVER --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure --grpc-web

      - name: Fetch Logs on Failure
        run: |
          argocd app logs reg-sl-${{ github.event.client_payload.run_id }} --grpc-web > reg-sl-${{ github.event.client_payload.run_id }}.log
          argocd app logs reg-pg-${{ github.event.client_payload.run_id }} --grpc-web > reg-pg-${{ github.event.client_payload.run_id }}.log
        shell: bash

      - name: Upload Logs
        uses: actions/upload-artifact@v4
        with:
          name: application-logs
          path: |
            reg-sl-${{ github.event.client_payload.run_id }}.log
            reg-pg-${{ github.event.client_payload.run_id }}.log

  # cleanup:
  #   runs-on: ubuntu-latest
  #   needs: [preparation, running-tests, fetch-logs]
  #   if: always()
  #   steps:
  #     - name: Cache ArgoCD CLI
  #       id: argocd-cache
  #       uses: actions/cache@v4
  #       with:
  #         path: /usr/local/bin/argocd
  #         key: argocd-v2.11.5

  #     - name: Install ArgoCD CLI
  #       if: steps.argocd-cache.outputs.cache-hit != 'true'
  #       run: |
  #         curl -sLO https://github.com/argoproj/argo-cd/releases/download/v2.11.5/argocd-linux-amd64
  #         chmod +x argocd-linux-amd64
  #         sudo mv argocd-linux-amd64 /usr/local/bin/argocd

  #     - name: Log in to ArgoCD
  #       env:
  #         ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
  #         ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
  #         ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}
  #       run: |
  #         argocd login $ARGOCD_SERVER --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure --grpc-web

  #     - name: Remove SQLite Instance
  #       run: argocd app delete reg-sl-${{ github.event.client_payload.run_id }} --yes --grpc-web

  #     - name: Remove Postgres Instance
  #       run: argocd app delete reg-pg-${{ github.event.client_payload.run_id }} --yes --grpc-web
