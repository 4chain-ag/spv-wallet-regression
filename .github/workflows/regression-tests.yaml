name: Regression tests for spv-wallet

on:
  repository_dispatch:
    types: [regression_tests]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      TEST_ID: ${{ github.event.client_payload.run_id }}
      IMAGE_TAG: ${{ github.event.client_payload.image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install ArgoCD CLI
        # maybe we should download concrete version
        # and what's more, maybe it's good idea to cache it with actions/cache https://github.com/actions/cache (but this can be done is a separate step)
        run: |
          curl -sLO https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd-linux-amd64
          sudo mv argocd-linux-amd64 /usr/local/bin/argocd

      - name: Log in to ArgoCD
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
          ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
          ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}
        run: |
          argocd login $ARGOCD_SERVER --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure --grpc-web

      - name: Deploy SQLite Instance
        run: |
          DOMAIN_NAME="test-${TEST_ID}-sqlite.dev.4chain.space"
          argocd app create reg-sl-${TEST_ID} \
            --repo https://github.com/${{ github.repository }} \
            --path charts/spv-wallet-regression-sqlite \
            --dest-server https://kubernetes.default.svc \
            --dest-namespace sqlite-instance \
            --revision HEAD \
            --sync-policy automated \
            --upsert \
            --grpc-web \
            --helm-set global.domainName=${DOMAIN_NAME} \
            --helm-set spv-wallet-stack.spv-wallet.image.tag=${{ env.IMAGE_TAG }}
            # temporary values for testing
            --helm-set spv-wallet-stack.spv-wallet.image.repository=wregulski/spv-wallet
        shell: bash

      - name: Deploy Postgres Instance
        run: |
          DOMAIN_NAME="test-${TEST_ID}-postgres.dev.4chain.space"
          argocd app create reg-pg-${TEST_ID} \
            --repo https://github.com/${{ github.repository }} \
            --path charts/spv-wallet-regression-postgres \
            --dest-server https://kubernetes.default.svc \
            --dest-namespace postgres-instance \
            --revision HEAD \
            --sync-policy automated \
            --upsert \
            --grpc-web \
            --helm-set global.domainName=${DOMAIN_NAME} \
            --helm-set spv-wallet-stack.spv-wallet.image.tag=${{ env.IMAGE_TAG }}
            # temporary values for testing
            --helm-set spv-wallet-stack.spv-wallet.image.repository=wregulski/spv-wallet
        shell: bash

      - name: Wait for Applications to be Healthy
        id: wait_for_apps
        run: |
          sleep 270
          for i in {1..3}; do
            STATUS_SQLITE=$(argocd app get reg-sl-${TEST_ID} --grpc-web -o json | jq -r '.status.health.status')
            STATUS_POSTGRES=$(argocd app get reg-pg-${TEST_ID} --grpc-web -o json | jq -r '.status.health.status')
            SYNC_SQLITE=$(argocd app get reg-sl-${TEST_ID} --grpc-web -o json | jq -r '.status.sync.status')
            SYNC_POSTGRES=$(argocd app get reg-pg-${TEST_ID} --grpc-web -o json | jq -r '.status.sync.status')
            if [[ "$STATUS_SQLITE" == "Healthy" && "$STATUS_POSTGRES" == "Healthy" && "$SYNC_SQLITE" == "Synced" && "$SYNC_POSTGRES" == "Synced" ]]; then
              echo "Both applications are synced and healthy"
              echo "::set-output name=app_status::healthy"
              break
            fi
            if [[ $i -eq 3 ]]; then
              echo "Applications did not become healthy and synced in time"
              echo "::set-output name=app_status::unhealthy"
            fi
            echo "Waiting for applications to be healthy and synced..."
            sleep 120
          done
        shell: bash

      # I would consider making running operator and tests a separate job (just a standard job, not reusable job)
      - name: Run Operator
        id: run_operator
        # Hmm.... why we actually, currently have operator in the spv-wallet repository, as it would be better to have it here
        run: |
          go run operator.go test-${TEST_ID}-sqlite.dev.4chain.space test-${TEST_ID}-postgres.dev.4chain.space
        shell: bash

      # something to consider - should we run go and js tests one by one, or maybe it's better to run them in paralel
      # for paralel
      # Pros: it will finish faster because it will run both in parallel
      # Cons: it would be harder to follow logs in case of issue
      - name: Download and Run External Tests
        # Use actions/checkout instead https://github.com/actions/checkout?tab=readme-ov-file#checkout-multiple-repos-side-by-side
        run: |
          git clone https://github.com/4chain-ag/spv-wallet-regression.git
          cd spv-wallet-regression

          # hmmm... interesting: I don't see command for installing taskfile
          # shouldn't you use something like this https://taskfile.dev/installation/#github-actions

          task regression-tests
        shell: bash

      # For sure, you should also upload those files as an artifact of the job https://github.com/actions/upload-artifact?tab=readme-ov-file#upload-using-a-wildcard-pattern
      - name: Fetch Logs on Failure
        if: ${{ failure() || steps.wait_for_apps.outputs.app_status == 'unhealthy' }}
        run: |
          # I'm affraid that you should rather use the `--name` param and load logs for each service separatelly, because I got an error when I tried to load pretty big logs of everything in a cluster (but maybe we can adjust it later)
          
          argocd app logs reg-sl-${TEST_ID} --grpc-web > reg-sl-${TEST_ID}.log
          argocd app logs reg-pg-${TEST_ID} --grpc-web > reg-pg-${TEST_ID}.log
        shell: bash

      - name: Remove SQLite Instance
        #it's worth to add here `if: always() - otherwise it won't make a cleanup on failure
        run: argocd app delete reg-sl-${TEST_ID} --yes --grpc-web

      - name: Remove Postgres Instance
        #it's worth to add here `if: always() - otherwise it won't make a cleanup on failure
        run: argocd app delete reg-pg-${TEST_ID} --yes --grpc-web
