name: Deploy and Manage Application

on:
  workflow_dispatch:
    inputs:
      commit_sha:
        description: 'Commit SHA'
        required: true
        default: 'latest'
      image_tag:
        description: 'Docker Image Tag'
        required: true
        default: 'latest'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install ArgoCD CLI
        run: |
          curl -sLO https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd-linux-amd64
          sudo mv argocd-linux-amd64 /usr/local/bin/argocd

      - name: Log in to ArgoCD
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
          ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
          ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}
        run: |
          argocd login $ARGOCD_SERVER --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure

      - name: Prepare Values File for SQLite
        run: |
          COMMIT_SHA=${{ github.event.inputs.commit_sha }}
          DOMAIN_NAME="test-${COMMIT_SHA}-sqlite.dev.4chain.space"
          cat <<EOF > values-sqlite.yaml
global:
  domainName: ${DOMAIN_NAME}
spv-wallet:
  image:
    tag: ${github.event.inputs.image_tag}
  EOF

- name: Deploy SQLite Instance
  run: |
    argocd app create spv-wallet-instance-sqlite \
      --repo https://github.com/${{ github.repository }} \
      --path charts/spv-wallet-regression-sqlite \
      --dest-server https://kubernetes.default.svc \
      --dest-namespace default \
      --revision HEAD \
      --values values-sqlite.yaml \
      --sync-policy automated

- name: Prepare Values File for Postgres
  run: |
    COMMIT_SHA=${{ github.event.inputs.commit_sha }}
    DOMAIN_NAME="test-${COMMIT_SHA}-postgres.dev.4chain.space"
    cat <<EOF > values-postgres.yaml
global:
  domainName: ${DOMAIN_NAME}
spv-wallet:
  image:
    tag: ${github.event.inputs.image_tag}
  EOF

- name: Deploy Postgres Instance
  run: |
    argocd app create spv-wallet-instance-postgres \
      --repo https://github.com/${{ github.repository }} \
      --path charts/spv-wallet-regression-postgres \
      --dest-server https://kubernetes.default.svc \
      --dest-namespace default \
      --revision HEAD \
      --values values-postgres.yaml \
      --sync-policy automated

- name: Wait for Applications to be Healthy
  run: |
    for i in {1..5}; do
      STATUS_SQLITE=$(argocd app get spv-wallet-instance-sqlite -o json | jq -r '.status.health.status')
      STATUS_POSTGRES=$(argocd app get spv-wallet-instance-postgres -o json | jq -r '.status.health.status')
      SYNC_SQLITE=$(argocd app get spv-wallet-instance-sqlite -o json | jq -r '.status.sync.status')
      SYNC_POSTGRES=$(argocd app get spv-wallet-instance-postgres -o json | jq -r '.status.sync.status')
      if [[ "$STATUS_SQLITE" == "Healthy" && "$STATUS_POSTGRES" == "Healthy" && "$SYNC_SQLITE" == "Synced" && "$SYNC_POSTGRES" == "Synced" ]]; then
        echo "Both applications are synced and healthy"
        break
      fi
      if [[ $i -eq 5 ]]; then
        echo "Applications did not become healthy and synced in time"
        exit 1
      fi
      echo "Waiting for applications to be healthy and synced..."
      sleep 5
    done

- name: Perform Task
  run: echo "Applications are synced and healthy. Performing task..."

- name: Remove SQLite Instance
  run: argocd app delete spv-wallet-instance-sqlite --yes

- name: Remove Postgres Instance
  run: argocd app delete spv-wallet-instance-postgres --yes
