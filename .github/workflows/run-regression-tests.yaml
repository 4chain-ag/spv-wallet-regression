name: '[Reusable] Run regression tests for spv-wallet'

on:
  workflow_call:
    inputs:
      image_tag:
        description: 'SPV Wallet docker image tag to deployed during regression tests'
        default: 'latest'
        required: false
        type: string
      run_id:
        description: 'Run ID that will distinguish instances of the application between different runs'
        default: ${{ github.run_id }}-${{ github.run_attempt }}
        required: true
        type: string
      keep_instances:
        description: | 
          Whether to keep instances after the tests are done.
          It accepts following values:
          - 'always' - never remove them
          - 'failure' - remove them only if the tests fail
          - 'never' - always remove them [default]
          Any other value will be treated as the default value.
        default: 'never'
        required: true
        type: string
      run_go_client_tests:
        description: 'Whether to run go-client tests'
        default: true
        required: false
        type: boolean
      go_client_ref:
        description: 'Git ref of the go-client repository to be used during regression tests, defaults to the default branch aka main'
        default: ''
        required: false
        type: string
      run_js_client_tests:
        description: 'Whether to run js-client tests'
        default: true
        required: false
        type: boolean
      js_client_ref:
        description: 'Git ref of the js-client repository to be used during regression tests, defaults to the default branch aka main'
        default: ''
        required: false
        type: string
    secrets:
      MASTER_INSTANCE_URL:
        description: 'URL of the spv-wallet that is holding funds used for running the tests'
        required: true
      MASTER_INSTANCE_XPRIV:
        description: 'User xpriv of the spv-wallet that is holding funds used for running the tests'
        required: true
      BLOCK_HEADERS_SERVICE_URL:
        description: 'URL of the block headers service instance to be used during regression tests'
        required: true
      BLOCK_HEADERS_SERVICE_AUTH_TOKEN:
        description: 'Auth token for the block headers service instance to be used during regression tests'
        required: true
      ARGOCD_SERVER:
        description: 'URL of the ArgoCD server where the applications will be deployed'
        required: true
      ARGOCD_USERNAME:
        description: 'Username for authentication on the ArgoCD server'
        required: true
      ARGOCD_PASSWORD:
        description: 'Password for authentication on the ArgoCD server'
        required: true

env:
  TEST_ID: ${{ inputs.run_id }}
  SQLITE_INSTANCE_NAME: reg-sl-${{ inputs.run_id }}
  POSTGRES_INSTANCE_NAME: reg-pg-${{ inputs.run_id }}

  CLIENT_ONE_URL: ${{ inputs.run_id }}-sl.regression.4chain.pl
  CLIENT_TWO_URL: ${{ inputs.run_id }}-pg.regression.4chain.pl
  # We're setting this keys statically and publicly because
  # they won't operate on a big amounts,
  # and it will be easier to debug if something goes wrong
  CLIENT_ONE_LEADER_XPRIV: xprv9s21ZrQH143K3JA1mzQpYzUX5zZYEos7hghmQAG1D8rhdhm3fQzFRp4NjFRQ2jvdkWnvstYJw3P5BhV4ytrg49MEu9m3zfkjziDTiKUcxtr
  CLIENT_TWO_LEADER_XPRIV: xprv9s21ZrQH143K386fSgjYrNdfEUHpjUEjMckdrh6d3sv4pojsfEgVoTGybefJgr2GN6pTpu6M4Pv7VWTRQuFAw741s22eaZiomKMbLrYijBh

  BLOCK_HEADERS_SERVICE_URL: ${{ secrets.BLOCK_HEADERS_SERVICE_URL }}
  BLOCK_HEADERS_SERVICE_AUTH_TOKEN: ${{ secrets.BLOCK_HEADERS_SERVICE_AUTH_TOKEN }}

  ARGO_CD_CLI_VERSION: v2.11.8

  REG_TESTS_GH_REPO: 4chain-ag/spv-wallet-regression

jobs:
  check-balance:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REG_TESTS_GH_REPO }}
          path: spv-wallet-regression

      - name: Install Go from go.mod
        uses: actions/setup-go@v5
        with:
          go-version-file: spv-wallet-regression/go.mod

      - name: Check Master Balance
        run: |
          cd spv-wallet-regression
          go run ./cmd/check-balance/main.go
        env:
          MASTER_INSTANCE_URL: ${{ secrets.MASTER_INSTANCE_URL }}
          MASTER_INSTANCE_XPRIV: ${{ secrets.MASTER_INSTANCE_XPRIV }}

  preparation:
    needs: check-balance
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ inputs.image_tag }}
    outputs:
      app_status: ${{ steps.wait_for_apps.outputs.app_status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REG_TESTS_GH_REPO }}

      - name: Cache ArgoCD CLI
        id: argocd-cache
        uses: actions/cache@v4
        with:
          path: /usr/local/bin/argocd
          key: argocd-${{ env.ARGO_CD_CLI_VERSION }}

      - name: Install ArgoCD CLI
        if: steps.argocd-cache.outputs.cache-hit != 'true'
        run: |
          curl -sLO https://github.com/argoproj/argo-cd/releases/download/${{ env.ARGO_CD_CLI_VERSION }}/argocd-linux-amd64
          chmod +x argocd-linux-amd64
          sudo mv argocd-linux-amd64 /usr/local/bin/argocd

      - name: Log in to ArgoCD
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
          ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
          ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}
        run: |
          argocd login $ARGOCD_SERVER --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure --grpc-web

      - name: Deploy SQLite Instance
        run: |
          DOMAIN_NAME="${CLIENT_ONE_URL}"
          argocd app create ${SQLITE_INSTANCE_NAME} \
            --repo https://github.com/${{ env.REG_TESTS_GH_REPO }} \
            --path charts/spv-wallet-regression-sqlite \
            --dest-server https://kubernetes.default.svc \
            --dest-namespace sqlite-instance-${TEST_ID} \
            --revision HEAD \
            --sync-policy automated \
            --sync-option CreateNamespace=true \
            --upsert \
            --grpc-web \
            --helm-set global.domainName=${DOMAIN_NAME} \
            --helm-set spv-wallet-stack.spv-wallet.image.tag=${{ env.IMAGE_TAG }} \
            --helm-set spv-wallet-stack.spv-wallet.image.repository=bsvb/spv-wallet \
            --helm-set spv-wallet-stack.spv-wallet.config.block_headers_service.url=${{ env.BLOCK_HEADERS_SERVICE_URL }} \
            --helm-set spv-wallet-stack.spv-wallet.config.block_headers_service.auth_token=${{ env.BLOCK_HEADERS_SERVICE_AUTH_TOKEN }} \
            --helm-set spv-wallet-stack.spv-wallet.config.paymail.beef.block_headers_service_url=${{ env.BLOCK_HEADERS_SERVICE_URL }}/api/v1/chain/merkleroot/verify \
            --helm-set spv-wallet-stack.spv-wallet.config.paymail.beef.block_headers_service_auth_token=${{ env.BLOCK_HEADERS_SERVICE_AUTH_TOKEN }}
        shell: bash

      - name: Deploy Postgres Instance
        run: |
          DOMAIN_NAME="${CLIENT_TWO_URL}"
          argocd app create ${POSTGRES_INSTANCE_NAME} \
            --repo https://github.com/${{ env.REG_TESTS_GH_REPO }} \
            --path charts/spv-wallet-regression-postgres \
            --dest-server https://kubernetes.default.svc \
            --dest-namespace postgres-instance-${TEST_ID} \
            --revision HEAD \
            --sync-policy automated \
            --sync-option CreateNamespace=true \
            --upsert \
            --grpc-web \
            --helm-set global.domainName=${DOMAIN_NAME} \
            --helm-set spv-wallet-stack.spv-wallet.image.tag=${{ env.IMAGE_TAG }} \
            --helm-set spv-wallet-stack.spv-wallet.image.repository=bsvb/spv-wallet \
            --helm-set spv-wallet-stack.spv-wallet.config.block_headers_service.url=${{ env.BLOCK_HEADERS_SERVICE_URL }} \
            --helm-set spv-wallet-stack.spv-wallet.config.block_headers_service.auth_token=${{ env.BLOCK_HEADERS_SERVICE_AUTH_TOKEN }} \
            --helm-set spv-wallet-stack.spv-wallet.config.paymail.beef.block_headers_service_url=${{ env.BLOCK_HEADERS_SERVICE_URL }}/api/v1/chain/merkleroot/verify \
            --helm-set spv-wallet-stack.spv-wallet.config.paymail.beef.block_headers_service_auth_token=${{ env.BLOCK_HEADERS_SERVICE_AUTH_TOKEN }}
        shell: bash

      - name: Wait for Applications to be Healthy
        id: wait_for_apps
        run: |
          sleep 120
          for i in {1..3}; do
            STATUS_SQLITE=$(argocd app get ${SQLITE_INSTANCE_NAME} --grpc-web -o json | jq -r '.status.health.status')
            STATUS_POSTGRES=$(argocd app get ${POSTGRES_INSTANCE_NAME} --grpc-web -o json | jq -r '.status.health.status')
            SYNC_SQLITE=$(argocd app get ${SQLITE_INSTANCE_NAME} --grpc-web -o json | jq -r '.status.sync.status')
            SYNC_POSTGRES=$(argocd app get ${POSTGRES_INSTANCE_NAME} --grpc-web -o json | jq -r '.status.sync.status')
            if [[ "$STATUS_SQLITE" == "Healthy" && "$STATUS_POSTGRES" == "Healthy" && "$SYNC_SQLITE" == "Synced" && "$SYNC_POSTGRES" == "Synced" ]]; then
              echo "Both applications are synced and healthy"
              echo "app_status=healthy" >> $GITHUB_OUTPUT
              break
            fi
            echo "Waiting for applications to be healthy and synced..."
            sleep 120
            if [[ $i -eq 3 ]]; then
              echo "Applications did not become healthy and synced in time"
              echo "app_status=unhealthy" >> $GITHUB_OUTPUT
            fi
          done
        shell: bash

  running-tests:
    runs-on: ubuntu-latest
    needs: [preparation, check-balance]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REG_TESTS_GH_REPO }}
          path: spv-wallet-regression

      - name: Install Go from go.mod
        uses: actions/setup-go@v5
        with:
          go-version-file: spv-wallet-regression/go.mod

      - name: Run Operator
        id: run_operator

        run: |
          cd spv-wallet-regression
          go run ./cmd/operator/main.go
        shell: bash
        env:
          MASTER_INSTANCE_URL: ${{ secrets.MASTER_INSTANCE_URL }}
          MASTER_INSTANCE_XPRIV: ${{ secrets.MASTER_INSTANCE_XPRIV }}

      - name: Install Task
        run: |
          sudo sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
        shell: bash

      - name: Checkout code
        if: inputs.run_go_client_tests
        uses: actions/checkout@v4
        with:
          repository: 4chain-ag/spv-wallet-go-client-v2
          ref: refactor/SPV-1278-add-regression-tests-implementation
          path: go-client

      - name: Run go-client Tests
        if: inputs.run_go_client_tests
        run: |
          cd go-client/regression_tests
          task run_regression_tests
        shell: bash
        env:
          CLIENT_ONE_URL: https://${{env.CLIENT_ONE_URL}}
          CLIENT_TWO_URL: https://${{env.CLIENT_TWO_URL}}

      - name: Checkout code
        if: inputs.run_js_client_tests
        uses: actions/checkout@v4
        with:
          repository: bitcoin-sv/spv-wallet-js-client
          path: js-client

      - name: Set up Node.js
        if: inputs.run_js_client_tests
        uses: actions/setup-node@v4
        with:
          node-version: '22.1.0'

      - name: Install Dependencies
        if: inputs.run_js_client_tests
        run: |
          cd js-client
          npm install
        shell: bash

      - name: Run js-client Tests
        if: inputs.run_js_client_tests
        run: |
          cd js-client/src/regression_tests
          task run_regression_tests
        shell: bash
        env:
          CLIENT_ONE_URL: https://${{env.CLIENT_ONE_URL}}
          CLIENT_TWO_URL: https://${{env.CLIENT_TWO_URL}}

  determine-status:
    runs-on: ubuntu-latest
    needs: [preparation, running-tests, check-balance]
    if: always()
    steps:
      - name: Determine Status
        run: |
          # Check the result of the running-tests job
          if [[ "${{ needs.running-tests.result }}" == "failure" ]]; then
            echo "failure" > test_status.txt
            echo "The running-tests job has failed."
          else
            echo "success" > test_status.txt
            echo "The running-tests job succeeded."
          fi
        shell: bash

      - name: Upload Test Status Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.running-tests.result }}_${{ github.run_id }}_${{ env.TEST_ID }}
          path: test_status.txt

  fetch-logs:
    runs-on: ubuntu-latest
    needs: [determine-status, check-balance]
    if: always()
    steps:
      - name: Cache ArgoCD CLI
        id: argocd-cache
        uses: actions/cache@v4
        with:
          path: /usr/local/bin/argocd
          key: argocd-v2.11.8

      - name: Install ArgoCD CLI
        if: steps.argocd-cache.outputs.cache-hit != 'true'
        run: |
          curl -sLO https://github.com/argoproj/argo-cd/releases/download/v2.11.8/argocd-linux-amd64
          chmod +x argocd-linux-amd64
          sudo mv argocd-linux-amd64 /usr/local/bin/argocd

      - name: Log in to ArgoCD
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
          ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
          ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}
        run: |
          argocd login $ARGOCD_SERVER --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure --grpc-web

      - name: Fetch Logs
        run: |
          argocd app logs ${SQLITE_INSTANCE_NAME} --grpc-web > ${{ env.SQLITE_INSTANCE_NAME }}.log
          argocd app logs ${POSTGRES_INSTANCE_NAME} --grpc-web > ${{ env.POSTGRES_INSTANCE_NAME }}.log
        shell: bash

      - name: Upload Logs
        uses: actions/upload-artifact@v4
        with:
          name: application-logs
          path: |
            ${{ env.SQLITE_INSTANCE_NAME }}.log
            ${{ env.POSTGRES_INSTANCE_NAME }}.log

  cleanup:
    runs-on: ubuntu-latest
    needs: [preparation, check-balance, running-tests, fetch-logs]
    # always (S) [F] => F & (TF) = F
    # always (F) [F] => F & (TF) = F
    # always (C) [F] => F & (TF) = F

    # never (S) [T] => T & ( ( F & (T || F) ) || T ) = T & ( ( F & T ) || T ) = T & ( F || T ) = T & T = T
    # never (F) [T] => T & ( ( F & (F || F) ) || T ) = T & ( ( F & F ) || T ) = T & ( F || T ) = T & T = T
    # never (C) [T] => T & ( ( F & (F || T) || T ) = T & ( ( F & T ) || T ) = T & ( F || T ) = T & T = T

    # failure (S) [T] => T & ( ( T & (T || F ) ) || F ) = T & ( ( T & T ) || F ) = T & ( T || F ) = T & T = T
    # failure (F) [F] => T & ( ( T & (F || F ) ) || F ) = T & ( ( T & F ) || F ) = T & ( F || F ) = T & F = F
    # failure (C) [T] => T & ( ( T & (F || T ) ) || F ) = T & ( ( T & T ) || F ) = T & ( T || F ) = T & T = T
    if: inputs.keep_instances != 'always' && ((inputs.keep_instances == 'failure' && (success() || cancelled())) || inputs.keep_instances != 'failure')
    steps:
      - name: Cache ArgoCD CLI
        id: argocd-cache
        uses: actions/cache@v4
        with:
          path: /usr/local/bin/argocd
          key: argocd-v2.11.8

      - name: Install ArgoCD CLI
        if: steps.argocd-cache.outputs.cache-hit != 'true'
        run: |
          curl -sLO https://github.com/argoproj/argo-cd/releases/download/v2.11.8/argocd-linux-amd64
          chmod +x argocd-linux-amd64
          sudo mv argocd-linux-amd64 /usr/local/bin/argocd

      - name: Log in to ArgoCD
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
          ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
          ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}
        run: |
          argocd login $ARGOCD_SERVER --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure --grpc-web

      - name: Remove SQLite Instance
        run: argocd app delete ${SQLITE_INSTANCE_NAME} --yes --grpc-web

      - name: Remove Postgres Instance
        run: argocd app delete ${POSTGRES_INSTANCE_NAME} --yes --grpc-web
